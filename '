#!/usr/bin/python3
import os
import pathlib
import tkinter.ttk as ttk
import pygubu

PROJECT_PATH = pathlib.Path(__file__).parent
PROJECT_UI = os.path.join(PROJECT_PATH, "manual.ui")


class ManualApp:
    def __init__(self, master=None):
        self.builder = builder = pygubu.Builder()

        builder.add_resource_path(PROJECT_PATH)
        builder.add_from_file(PROJECT_UI)

        self.mainwindow = builder.get_object("toplevel1", master)

        self._init_wire_vars(master)
        self._init_bigButton_vars(master)
        self._init_morseCode_vars()
        self._init_complicatedWires_vars()
        self._init_wireSequences_vars()
        self._init_passwords_vars()

        builder.connect_callbacks(self)

    def _init_wire_vars(self, master) -> None:
        self.checkbox_wires_serialOdd = self.builder.get_object("checkbox_wires_serialOdd", master)
        self.entry_wires_wireCombo = self.builder.get_object("entry_wires_wireCombo", master)
        self.label_wires_output = self.builder.get_object("label_wires_output", master)

        # Set checkbox state to false
        for i in range(2):
            self.checkbox_wires_serialOdd.invoke()

    def _init_bigButton_vars(self, master) -> None:
        self.spinbox_bigButton_batteryc = self.builder.get_object("spinbox_bigButton_batteryc", master)
        self.checkbox_bigButton_FRK = self.builder.get_object("checkbox_bigButton_FRK", master)
        self.checkbox_bigButton_CAR = self.builder.get_object("checkbox_bigButton_CAR", master)
        self.label_bigButton_output = self.builder.get_object("label_bigButton_output", master)

        # Set checkbox states to false
        for i in range(2):
            self.checkbox_bigButton_FRK.invoke()
            self.checkbox_bigButton_CAR.invoke()

    def _init_morseCode_vars(self) -> None:
        pass

    def _init_complicatedWires_vars(self) -> None:
        pass

    def _init_wireSequences_vars(self) -> None:
        pass

    def _init_passwords_vars(self) -> None:
        pass

    def _is_valid_bigButton_color(self, color: str) -> bool:
        return color in ("RED", "BLUE", "YELLOW", "WHITE", "BLACK")

    def run(self):
        self.mainwindow.mainloop()

    def button_wires_red(self) -> None:
        self.entry_wires_wireCombo.insert(len(self.entry_wires_wireCombo.get()), "R")

    def button_wires_yellow(self) -> None:
        self.entry_wires_wireCombo.insert(len(self.entry_wires_wireCombo.get()), "Y")

    def button_wires_blue(self) -> None:
        self.entry_wires_wireCombo.insert(len(self.entry_wires_wireCombo.get()), "U")

    def button_wires_white(self) -> None:
        self.entry_wires_wireCombo.insert(len(self.entry_wires_wireCombo.get()), "W")

    def button_wires_green(self) -> None:
        self.entry_wires_wireCombo.insert(len(self.entry_wires_wireCombo.get()), "G")

    def button_wires_black(self) -> None:
        self.entry_wires_wireCombo.insert(len(self.entry_wires_wireCombo.get()), "K")

    def button_wires_clear(self) -> None:
        self.label_wires_output["text"] = "???"
        self.entry_wires_wireCombo.delete(0, len(self.entry_wires_wireCombo.get()))

        if 'selected' in self.checkbox_wires_serialOdd.state():
            self.checkbox_wires_serialOdd.invoke()

    def button_wires_process(self) -> None:
        text = self.entry_wires_wireCombo.get().upper()
        length = len(text)

        serialOdd = 'selected' in self.checkbox_wires_serialOdd.state()

        if length < 3:
            self.label_wires_output["text"] = "Not enough wires."
        elif length > 6:
            self.label_wires_output["text"] = "Too many wires."
        
        if length == 3:
            if not 'R' in text:
                self.label_wires_output["text"] = "Cut the second wire."
            elif text[-1] == 'W':
                self.label_wires_output["text"] = "Cut the last wire."
            elif text.count('U') > 1:
                self.label_wires_output["text"] = "Cut the last blue wire."
            else:
                self.label_wires_output["text"] = "Cut the last wire."

        elif length == 4:
            if text.count('R') > 1 and serialOdd:
                self.label_wires_output["text"] = "Cut the last red wire."
            elif text[-1] == 'Y' and not 'R' in text:
                self.label_wires_output["text"] = "Cut the first wire."
            elif text.count('U') == 1:
                self.label_wires_output["text"] = "Cut the first wire."
            elif text.count('Y') > 1:
                self.label_wires_output["text"] = "Cut the last wire."
            else:
                self.label_wires_output["text"] = "Cut the second wire."

        elif length == 5:
            if text[-1] == 'K' and serialOdd:
                self.label_wires_output["text"] = "Cut the fourth wire."
            elif text.count('R') == 1 and text.count('Y') > 1:
                self.label_wires_output["text"] = "Cut the first wire."
            elif not 'K' in text:
                self.label_wires_output["text"] = "Cut the second wire."
            else:
                self.label_wires_output["text"] = "Cut the first wire."

        elif length == 6:
            if not 'Y' in text and serialOdd:
                self.label_wires_output["text"] = "Cut the third wire."
            elif text.count('Y') == 1 and text.count('W') > 1:
                self.label_wires_output["text"] = "Cut the fourth wire."
            elif not 'R' in text:
                self.label_wires_output["text"] = "Cut the last wire."
            else:
                self.label_wires_output["text"] = "Cut the fourth wire."

    def _button_bigButton_setSuffix(self, suffix: str) -> None:
        text = self.label_wires_output['text']

        if not self._is_valid_bigButton_color(text):
            return

        if '-' in text:
            self.label_wires_output['text'] = text[:text.find('-')] + suffix
        else:
            self.label_wires_output['text'] += suffix

    def button_bigButton_red(self):
        self.label_bigButton_output["text"] = "RED"

    def button_bigButton_blue(self):
        self.label_bigButton_output["text"] = "BLUE"

    def button_bigButton_yellow(self):
        self.label_bigButton_output["text"] = "YELLOW"

    def button_bigButton_white(self):
        self.label_bigButton_output["text"] = "WHITE"

    def button_bigButton_black(self):
        self.label_bigButton_output["text"] = "BLACK"

    def button_bigButton_abort(self):
        pass

    def button_bigButton_detonate(self):
        pass

    def button_bigButton_hold(self):
        pass

    def button_bigButton_press(self):
        pass

    def button_bigButton_process(self):
        pass

    def button_complicatedWires_process(self):
        pass

    def button_wireSequences_reset(self):
        pass

    def button_wireSequences_red(self):
        pass

    def button_wireSequences_blue(self):
        pass

    def button_wireSequences_black(self):
        pass

    def button_wireSequences_A(self):
        pass

    def button_wireSequences_B(self):
        pass

    def button_wireSequences_C(self):
        pass

    def button_wireSequences_process(self):
        pass


if __name__ == "__main__":
    app = ManualApp()
    app.run()
